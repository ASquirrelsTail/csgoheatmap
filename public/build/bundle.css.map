{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\..\\App.svelte",
    "..\\..\\Filters.svelte",
    "..\\..\\HeatMap.svelte",
    "..\\..\\Toasts.svelte",
    "..\\..\\Upload.svelte"
  ],
  "sourcesContent": [
    "<script>\n\timport Upload from './svelte/Upload.svelte';\n\timport HeatMap from './svelte/HeatMap.svelte';\n\timport Filters from './svelte/Filters.svelte';\n\timport Toasts from './svelte/Toasts.svelte';\n</script>\n\n<main>\n\t<Upload />\n\t<Filters />\n\n\t<div>\n\t  <HeatMap />\n\t</div>\n</main>\n\n<Toasts />\n\n<style>\n\tmain {\n\t\ttext-align: center;\n\t\tpadding: 1em;\n\t\tmax-width: 240px;\n\t\tmargin: 0 auto;\n\t}\n\n\th1 {\n\t\tcolor: #ff3e00;\n\t\ttext-transform: uppercase;\n\t\tfont-size: 4em;\n\t\tfont-weight: 100;\n\t}\n\n\t@media (min-width: 640px) {\n\t\tmain {\n\t\t\tmax-width: none;\n\t\t}\n\t}\n</style>",
    "<script>\r\n  import { parsedFiles, points, mapName} from '../store.js'\r\n  import mapData from '../mapdata.js';\r\n\r\n  let selectedFiles = [];\r\n  let filesToFilter = [];\r\n  let maps = new Set();\r\n  let players = [];\r\n  let selectedPlayer;\r\n  let group = 0;\r\n\r\n  let kills = false;\r\n  let team;\r\n\r\n  function filterMaps(files) {\r\n    return files.filter(file => file.mapName === $mapName);\r\n  }\r\n\r\n  function filterPlayer(files) {\r\n    if (selectedPlayer) {\r\n      if (group === 0) {\r\n        let  deaths = [].concat(...files.map(file => file.deaths));\r\n        if (kills) return deaths.filter(death => death.killer === selectedPlayer);\r\n        else return deaths.filter(death => death.player === selectedPlayer);\r\n      }else{\r\n        return [].concat(...files.filter(file => selectedPlayer in file.players).map(file => {\r\n          let playerTeam;\r\n          if (group === 1) playerTeam = file.players[selectedPlayer].team;\r\n          else playerTeam = (file.players[selectedPlayer].team + 1) % 2;\r\n          let teamPlayers = Object.keys(file.players)\r\n                                  .filter(playerId => file.players[playerId].team === playerTeam)\r\n                                  .map(playerId => parseInt(playerId));\r\n          if (kills)\r\n            return file.deaths.filter(death => teamPlayers.includes(death.killer))\r\n          else\r\n            return file.deaths.filter(death => teamPlayers.includes(death.player))\r\n        }));\r\n      }\r\n    } else return [].concat(...files.map(file => file.deaths));\r\n  }\r\n\r\n  function filterTeam(deaths) {\r\n    if (team === 0 || team === 1) return deaths.filter(death => death.playerTeam === (kills + team) % 2);\r\n    else return deaths;\r\n  }\r\n\r\n  function runFilters() {\r\n    filesToFilter = selectedFiles.length ? selectedFiles : $parsedFiles;\r\n    $points = filterTeam(filterPlayer(filterMaps(filesToFilter)))\r\n                .map(death => death.position)\r\n  }\r\n\r\n  $: {\r\n    filesToFilter = selectedFiles.length ? selectedFiles : $parsedFiles;\r\n    maps = new Set(filesToFilter.map(file => file.mapName));\r\n    if ((!$mapName || !maps.has($mapName)) && filesToFilter.length > 0) $mapName = filesToFilter[0].mapName;\r\n    players = Object.entries(Object.assign({}, ...filesToFilter.map(file => file.players)))\r\n      .map(player => { return {id: parseInt(player[0]), name: player[1].name}})\r\n      .filter(player => player.id > 40);\r\n    if (!players.some(player => player.id === selectedPlayer)) selectedPlayer = false;\r\n    runFilters();\r\n  }\r\n\r\n</script>\r\n\r\n<label for=\"files\">Demo Files</label>\r\n<select multiple id=\"files\" bind:value={selectedFiles} on:change={runFilters}>\r\n  {#each $parsedFiles as file}\r\n    <option value={file}>\r\n      {file.fileName} - {file.mapName}\r\n    </option>\r\n  {/each}\r\n</select>\r\n\r\n<label for=\"map\">Map:</label>\r\n<select id=\"map\" bind:value={$mapName} on:change={runFilters}>\r\n  {#each Object.keys(mapData) as map}\r\n    <option value={map} disabled={!maps.has(map)}>\r\n      {map}\r\n    </option>\r\n  {/each}\r\n</select>\r\n\r\n<br>\r\n\r\n<label for=\"players\">Players</label>\r\n<select id=\"players\" bind:value={selectedPlayer} on:change={runFilters}>\r\n  <option value={false}>All</option>\r\n  {#each players as player}\r\n    <option value={player.id}>\r\n      {player.name}\r\n    </option>\r\n  {/each}\r\n</select>\r\n<button on:click=\"{() => {group = 0; runFilters()}}\" disabled={!selectedPlayer}\r\n  class:selected=\"{selectedPlayer && group === 0}\">Solo</button>\r\n<button on:click=\"{() => {group = 1; runFilters()}}\" disabled={!selectedPlayer}\r\n  class:selected=\"{selectedPlayer && group === 1}\">Team</button>\r\n<button on:click=\"{() => {group = 2; runFilters()}}\" disabled={!selectedPlayer}\r\n  class:selected=\"{selectedPlayer && group === 2}\">Opponents</button>\r\n\r\n<br>\r\n\r\n<button on:click=\"{() => {kills = true; runFilters()}}\" class:selected={kills}>Kills</button>\r\n<button on:click=\"{() => {kills = false; runFilters()}}\" class:selected={!kills}>Deaths</button>\r\n\r\n<br>\r\n\r\n<button on:click=\"{() => {team = 0; runFilters()}}\" class:selected=\"{team === 0}\">T</button>\r\n<button on:click=\"{() => {team = 1; runFilters()}}\" class:selected=\"{team === 1}\">CT</button>\r\n<button on:click=\"{() => {team = null; runFilters()}}\" class:selected=\"{team !== 0 && team !== 1}\">All</button>\r\n\r\n<style>\r\n  .selected {\r\n    background-color: #99ff66;\r\n  }\r\n</style>",
    "<script>\r\n  import simpleheat from 'simpleheat';\r\n  import { onMount } from 'svelte';\r\n  import mapData from '../mapdata.js';\r\n  import { points, mapName } from '../store.js'\r\n  export let density = 3;\r\n\r\n  let canvas;\r\n  let heat;\r\n\r\n  let displaySetting = 'heat'\r\n\r\n  let scale = 10;\r\n  let offsetX = 204;\r\n  let offsetY = 387;\r\n\r\n  onMount(() => {\r\n    heat = simpleheat(canvas);\r\n    heat.radius(5, 2);\r\n    heat.max(density);\r\n  });\r\n\r\n  function drawPoints() {\r\n    const ctx = canvas.getContext('2d');\r\n    ctx.fillStyle = 'white';\r\n    ctx.globalAlpha = 1;\r\n    ctx.globalCompositeOperation = 'source-over';\r\n    ctx.clearRect(0, 0, 500, 500);\r\n    $points.forEach(point => {\r\n      ctx.fillRect(Math.floor(point.x/scale + offsetX), Math.floor(-point.y/scale + offsetY), 1, 1);\r\n    });\r\n  }\r\n\r\n  $: if(heat && $points) { // If points changes redraw\r\n    if (displaySetting === 'heat') {\r\n      heat.data($points.map(point => [point.x/scale + offsetX, -point.y/scale + offsetY, 1]));\r\n      heat.draw();\r\n    } else drawPoints();\r\n    \r\n    \r\n  }\r\n\r\n  $: if ($mapName && mapData[$mapName]) { // If map changes update scale and offset\r\n    scale = mapData[$mapName].s;\r\n    offsetX = mapData[$mapName].x;\r\n    offsetY = mapData[$mapName].y;\r\n  }\r\n\r\n  $: if (heat) {\r\n    heat.max(density); // If density changes redraw\r\n    if (displaySetting === 'heat') heat.draw();\r\n  }\r\n\r\n</script>\r\n\r\n<div>\r\n  <canvas width=500 height=500 bind:this={canvas}\r\n  style=\"background-image: {mapData[$mapName] ? `url(./images/${$mapName}.jpg)` : 'none'};\"></canvas>\r\n</div>\r\n\r\n<div class=\"settings\">\r\n  <select name=\"display\" bind:value={displaySetting}>\r\n    <option value=\"heat\">Heatmap</option>\r\n    <option value=\"points\">Points</option>\r\n  </select>\r\n  {#if displaySetting === 'heat'}\r\n  <button on:click=\"{() => density += 1}\">Gain Down</button>\r\n  <button on:click=\"{() => density = Math.max(density - 1, 2)}\">Gain Up</button>\r\n  {/if}\r\n</div>\r\n\r\n<div id=\"scales\">\r\n  <label for=\"scale\">Scale:</label><input type=\"number\" id=\"scale\" bind:value={scale}>\r\n  <label for=\"offset-x\">Offset X:</label><input type=\"number\" id=\"offset-x\" bind:value={offsetX}>\r\n  <label for=\"offset-y\">Offset Y:</label><input type=\"number\" id=\"offset-y\" bind:value={offsetY}>\r\n  <label for=\"density\">Density:</label><input type=\"number\" id=\"density\" bind:value={density}>\r\n</div>\r\n\r\n<style>\r\n  canvas {\r\n    background-size: cover;\r\n    background-color: black;\r\n  }\r\n\r\n  #scales {\r\n    display: none;\r\n  }\r\n\r\n  #scales input {\r\n    width: 5em;\r\n    margin-right: 1em;\r\n    text-align: center;\r\n  }\r\n\r\n  #scales label {\r\n    display: inline-block;\r\n    padding-right: 0.3em;\r\n  }\r\n</style>\r\n",
    "<script>\r\n  import { fade, fly } from 'svelte/transition';\r\n  import { toasts } from '../store.js';\r\n</script>\r\n\r\n<div class=\"toast-container\">\r\n  {#each $toasts as toast (toast)}\r\n    <div class=\"toast {toast.type}\" in:fly=\"{{ y: 200, duration: 300 }}\" out:fade>\r\n      {toast.message}\r\n    </div>\r\n  {/each}\r\n</div>\r\n\r\n<style>\r\n  .toast-container {\r\n    position: fixed;\r\n    bottom: 0px;\r\n    right: 0px;\r\n    padding-right: 0.2rem;\r\n  }\r\n\r\n  .toast {\r\n    background-color: white;\r\n    border: 1px solid #ccc;\r\n    padding: 0.3em;\r\n    border-radius: 2px;\r\n    margin-left: auto;\r\n    margin-bottom: 0.2rem;\r\n  }\r\n\r\n  .toast.error {\r\n    background-color: #ff6666;\r\n  }\r\n</style>",
    "<script>\r\n  import parseFile from '../utils/parseFile.js';\r\n  import { parsedFiles, mapName, toasts } from '../store.js'\r\n  \r\n  let form;\r\n  let files;\r\n  let parsing = false;\r\n\r\n  function addFiles() {\r\n    parsing = true;\r\n    const filePromises = [...files]\r\n      .filter(file => !$parsedFiles.some(parsed => parsed.fileName === file.name)) // Check files haven't already been parsed, then parse them\r\n      .map(file => parseFile(file));\r\n    filePromises.forEach(filePromise => filePromise.then(file => {\r\n      $parsedFiles.push(file);\r\n      $parsedFiles = $parsedFiles;\r\n      toasts.push(`Successfuly finished parsing ${file.fileName}.`, 'success');\r\n    }));\r\n    Promise.allSettled(filePromises)\r\n      .then(finishedFiles => {\r\n        parsing = false;\r\n        form.reset();\r\n\r\n        const succededFiles = finishedFiles.filter(result => result.status === 'fulfilled').length;\r\n        const failedFiles = finishedFiles.length - succededFiles;\r\n        toasts.push(`Successfuly parsed ${succededFiles} files.`, 'success');\r\n        if (failedFiles) toasts.push(`Failed to parse ${failedFiles} files.`, 'error');\r\n\r\n        // Store all/updated parsed files to storage\r\n        localStorage.setItem('parsedFiles', JSON.stringify($parsedFiles));\r\n      });\r\n  }\r\n\r\n</script>\r\n\r\n<form id=\"upload-form\" class:spinner={parsing} bind:this={form}>\r\n  <label for=\"file-upload\">Upload demo files</label>\r\n  <input type=\"file\" accept=\".dem\" id=\"file-upload\" multiple\r\n    bind:files disabled={parsing} on:change={addFiles}>\r\n  <button on:click|preventDefault=\"{() => form.reset()}\" disabled={parsing}>Clear</button>\r\n</form>\r\n\r\n\r\n\r\n<style>\r\n  #upload-form {\r\n    position: relative;\r\n  }\r\n\r\n  @keyframes pulse {\r\n    from {\r\n      width: 2em;\r\n      height: 2em;\r\n    }\r\n\r\n    to {\r\n      width: 5em;\r\n      height: 5em;\r\n    }\r\n  }\r\n\r\n  #upload-form.spinner:before {\r\n    content: '';\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n    width: 4em;\r\n    height: 4em;\r\n    border-radius: 50%;\r\n    background-color: rgba(100, 100, 100, 0.5);\r\n    transform: translate(-50%, -50%);\r\n    animation-duration: 0.4s;\r\n    animation-name: pulse;\r\n    animation-iteration-count: infinite;\r\n    animation-direction: alternate;\r\n    animation-timing-function: ease-in-out;\r\n  }\r\n</style>\r\n"
  ],
  "names": [],
  "mappings": "AAmBC,IAAI,eAAC,CAAC,AACL,UAAU,CAAE,MAAM,CAClB,OAAO,CAAE,GAAG,CACZ,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,CAAC,CAAC,IAAI,AACf,CAAC,AASD,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AAC1B,IAAI,eAAC,CAAC,AACL,SAAS,CAAE,IAAI,AAChB,CAAC,AACF,CAAC;AC4EA,SAAS,cAAC,CAAC,AACT,gBAAgB,CAAE,OAAO,AAC3B,CAAC;ACpCD,MAAM,8BAAC,CAAC,AACN,eAAe,CAAE,KAAK,CACtB,gBAAgB,CAAE,KAAK,AACzB,CAAC,AAED,OAAO,8BAAC,CAAC,AACP,OAAO,CAAE,IAAI,AACf,CAAC,AAED,sBAAO,CAAC,KAAK,eAAC,CAAC,AACb,KAAK,CAAE,GAAG,CACV,YAAY,CAAE,GAAG,CACjB,UAAU,CAAE,MAAM,AACpB,CAAC,AAED,sBAAO,CAAC,KAAK,eAAC,CAAC,AACb,OAAO,CAAE,YAAY,CACrB,aAAa,CAAE,KAAK,AACtB,CAAC;ACnFD,gBAAgB,eAAC,CAAC,AAChB,QAAQ,CAAE,KAAK,CACf,MAAM,CAAE,GAAG,CACX,KAAK,CAAE,GAAG,CACV,aAAa,CAAE,MAAM,AACvB,CAAC,AAED,MAAM,eAAC,CAAC,AACN,gBAAgB,CAAE,KAAK,CACvB,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,CACtB,OAAO,CAAE,KAAK,CACd,aAAa,CAAE,GAAG,CAClB,WAAW,CAAE,IAAI,CACjB,aAAa,CAAE,MAAM,AACvB,CAAC,AAED,MAAM,MAAM,eAAC,CAAC,AACZ,gBAAgB,CAAE,OAAO,AAC3B,CAAC;ACaD,YAAY,eAAC,CAAC,AACZ,QAAQ,CAAE,QAAQ,AACpB,CAAC,AAED,WAAW,oBAAM,CAAC,AAChB,IAAI,AAAC,CAAC,AACJ,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,GAAG,AACb,CAAC,AAED,EAAE,AAAC,CAAC,AACF,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,GAAG,AACb,CAAC,AACH,CAAC,AAED,YAAY,uBAAQ,OAAO,AAAC,CAAC,AAC3B,OAAO,CAAE,EAAE,CACX,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,GAAG,CACR,IAAI,CAAE,GAAG,CACT,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,GAAG,CACX,aAAa,CAAE,GAAG,CAClB,gBAAgB,CAAE,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAC1C,SAAS,CAAE,UAAU,IAAI,CAAC,CAAC,IAAI,CAAC,CAChC,kBAAkB,CAAE,IAAI,CACxB,cAAc,CAAE,oBAAK,CACrB,yBAAyB,CAAE,QAAQ,CACnC,mBAAmB,CAAE,SAAS,CAC9B,yBAAyB,CAAE,WAAW,AACxC,CAAC"
}